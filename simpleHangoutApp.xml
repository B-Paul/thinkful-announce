<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *	
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
	<ModulePrefs title="Hangout Starter">
		<Require feature="rpc" />
		<Require feature="views" />
		<Require feature="locked-domain" />
	</ModulePrefs>
	<Content type="html"><![CDATA[

<html>
<body>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<h3>Simple Hangout App</h3>

<p>
<input class="button" type="button" value="Post Test Slack" id="postSlack"
    style="visibility:hidden;"
    onclick="postSlack_()"/>
</p>

<div id="data"></div>

<script>
// Object type to hold the spreadsheet data
function Grid() {
  this.cols = {};
  this.rows = {};
  this.add = this._addColumn;
}

Grid.prototype._addColumn = function (address, text) {
  var row = address.row, col = address.col;
  // Use the rows object to keep track of row numbers we've been given.
  this.rows[row] = this.rows[row];

  // Add column names for each header row
  if (Object.keys(this.rows).length <= 1) {
    this.cols[col] = text;
    return this;
  }

  // As soon as past the first row, assume all column headers have been given
  // and switch modes 
  this.add = this._addData;
  this._addColumn = null;
  // Throw away the record of the header row.
  this.rows = {};
  return this.add(address, text);
};

Grid.prototype._addData = function (address, text) {
  var row = address.row, col = address.col, colName, rowData;

  if (this._addColumn !== null) {
    return this._addColumn(address, text);
  } else if (!(col in this.cols)) {
    throw new Error('no header value for this column');
  }

  colName = this.cols[col];
  rowData = this.rows[row] = this.rows[row] || this.mkRow();
  if (rowData[colName] !== void 0) {
    throw new Error('overlapping data');
  }

  rowData[colName] = text;
  return this;
};

Grid.prototype.mkRow = function () {
  var rowData = {}, cols = this.cols;
  Object.keys(cols).forEach(function (key) {
    var colName = cols[key];
    rowData[colName] = void 0;
  });
  return rowData;
};

var officeHours = new Grid();

function parseSpreadsheetCells(data) {
  var hangout = Object.prototype;

  data.feed.entry.forEach(function (cell) {
    var text = cell.content.$t.trim(),
        address = cell.title.$t.match(/([A-Z]+)(\d+)/);
    address = {
      col: address[1],
      row: address[2]
    };
    officeHours.add(address, text);
  });

  Object.keys(officeHours.rows).sort().forEach(function (rowNum) {
    var row = officeHours.rows[rowNum], date, timezone, time, start, end;

    delete officeHours.rows[rowNum];

    // Make a new object with all the properties of the current row, the proto-
    // type of which is the object created in this way from the previous row.
    // This is to cover any columns that are missing from a particular row.
    hangout = Object.create(hangout);
    Object.keys(row).forEach(function (key) {
      if (row[key] !== void 0) { hangout[key] = row[key]; }
    });

    date = nextOfWeekday(hangout['Day']);
    timezone = date.getTimezoneOffset() === jan1().getTimezoneOffset()
      ? 'EST'
      : 'EDT';
    date = date.toDateString();
    time = hangout['Time (EST)'].split('-');
    start = time[0].trim();
    end = time[1].trim();
    hangout.start = start = new Date([date, start, timezone].join(' '));
    hangout.end = end = new Date([date, end, timezone].join(' '));

    officeHours.rows[hangout.start.getTime()] = hangout;
  });

  document.dispatchEvent(new Event('tf-hangoutsready'));

  function jan1() {
    var d = new Date();
    d.setMonth(0);
    d.setDate(1);
    return d;
  }
}

function nextOfWeekday(wkdayName) {
  var date = new Date(), targetDay = {
    'Sunday':    0,
    'Monday':    1,
    'Tuesday':   2,
    'Wednesday': 3,
    'Thursday':  4,
    'Friday':    5,
    'Saturday':  6
  }[wkdayName];
  if (isNaN(+targetDay)) { throw new Error('Bad weekday name'); }
  while (date.getDay() !== targetDay) {
    date.setDate(date.getDate() + 1);
  }
  return date;
}

function nextByTime(map) {
  var times = Object.keys(map), now = new Date().getTime(),
    lastStart, nextStart, hangout;
  times.push(now);
  times = times.sort();
  lastStart = times[times.indexOf(now) - 1];
  nextStart = times[times.indexOf(now) + 1];

  hangout = map[lastStart];
  if (hangout.end.getTime() < now) { hangout = map[nextStart]; }

  return hangout;
}

function postSlack(message, channel) {
  // var token = 'xoxp-2442078175-3326376290-3725937040-91e5d7';
  // var url = 'https://slack.com/api/chat.postMessage';
  // var xhr = new XMLHttpRequest();
  // xhr.open('POST', url);
  // xhr.onload = checkSlack;
  // xhr.send(
  //   'token=' + token
  //   + '&channel=' + channel
  //   + '&text=' + message);
  console.log(message);
}

function checkSlack(response) {
  console.log(response);
  var div = document.getElementById('data');
  div.innerHTML = JSON.stringify(response);
}

function postSlack_() {
  var hangout = nextByTime(officeHours.rows);
  var timeLeft = Math.floor((hangout.start() - new Date()) / 1000 * 60)
  var message = 'Test message: '
  if (timeLeft < 0) {
    message += 'Office hours on now with '
    message += hangout['Host'];
  } else {
    message += 'The next office hours session will be in '
    message += timeLeft + ' minutes '
    message += 'with '
    message += hangout['Host'];
  }
  postSlack(message, 'C035VHM9B');
}

function init() {
  var script = document.createElement('script');
  script.src = '//spreadsheets.google.com/feeds/cells/'
    + '1dbQ5XLk8k83b1Za3Ugmp4PW-9QKaW9j46Pmd0fLT96Y/od6'
    + '/public/basic?alt=json-in-script&callback=parseSpreadsheetCells';
  document.body.appendChild(script);
  document.addEventListener('tf-hangoutsready', function () {
    document.getElementById('postSlack').style.visibility = 'visible';
  });
}

// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>

