<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *	
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
	<ModulePrefs title="Hangout Starter">
		<Require feature="rpc" />
		<Require feature="views" />
		<Require feature="locked-domain" />
	</ModulePrefs>
	<Content type="html"><![CDATA[

<html>
<style>

body {
  padding: .8em;
  font-size: .8em;
}

#info {
  color: #40404b;
}

#controls, #timer {
  min-height: 2.5em;
}

#controls {
  visibility: hidden;
}

#timer {
  display: none;
}

.button {
  border: none;
  background-color: #427fed;
  color: white;
  line-height: 14px;
  padding: 7px;
  font-size: 1.1em;
}

h5 {
  margin-top: 1.4em;
  margin-bottom: .6em;
}

#time-left {
  font-size: 1.75em;
}

.channel {
  display: inline-block;
  width: 40%;
  padding-left: 5%;
  white-space: nowrap;
  overflow: hidden;
}

#status {
  padding-top: 1em;
}

</style>
<body>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<h3>Office Hours Announcer</h3>

<p id="info">If office hours are in session, bot will post the display names of
participants to the specified channels. If not, it will post a time until the
next session instead.</p>

<div id="controls">
  <input class="button" type="button" value="Post to Slack" id="postSlack"
      onclick="announce()" />
  <input type="checkbox" id="repost" checked="checked" />
  <label for="repost">Post again in 15 minutes</label>

  <div id="timer">
    <p>Auto post in: <span id="time-left"></span></p>
    <input class="button" type="button" value="Pause" id="pauseTimer"
      onclick="toggleNextAnnouncePaused()" />
    <input class="button" type="button" value="Stop" id="stopTimer"
      onclick="cancelNextAnnounce()" />
  </div>

  <h5>Channels</h5>
  <div id="channels"></div>
</div>

<div id="status"></div>

<script>
var spreadsheetId = '1dbQ5XLk8k83b1Za3Ugmp4PW-9QKaW9j46Pmd0fLT96Y/od6';
var slackToken = 'xoxp-2442078175-3326376290-3725937040-91e5d7';
var officeHoursHangout = 'https://plus.google.com/hangouts/_/event/c27caov1if6tvbkjn7473q7v0v4';
var statusContainer = document.getElementById('status');
var channelsContainer = document.getElementById('channels');
var repostControl = document.getElementById('repost');
var timerContainer = document.getElementById('timer');
var timerDisplay = document.getElementById('time-left');
var pauseControl = document.getElementById('pauseTimer');
var autoPostInterval = 15 // minutes;

var officeHours;

function parseSpreadsheetCells(data) {
  var hangout = Object.prototype;

  officeHours = new Grid();

  data.feed.entry.forEach(function (cell) {
    var text = cell.content.$t.trim(),
        address = cell.title.$t.match(/([A-Z]+)(\d+)/);
    address = {
      col: address[1],
      row: address[2]
    };
    officeHours.add(address, text);
  });

  Object.keys(officeHours.rows).sort().forEach(function (rowNum) {
    var row = officeHours.rows[rowNum], date, timezone, time, start, end;

    delete officeHours.rows[rowNum];

    // Make a new object with all the properties of the current row, the proto-
    // type of which is the object created in this way from the previous row.
    // This is to cover any columns that are missing from a particular row.
    hangout = Object.create(hangout);
    Object.keys(row).forEach(function (key) {
      if (row[key] !== void 0) { hangout[key] = row[key]; }
    });

    // Calculate the start and end times
    date = nextOfWeekday(hangout['Day']);
    timezone = date.getTimezoneOffset() === jan1().getTimezoneOffset()
      ? 'EST'
      : 'EDT';
    date = date.toDateString();
    time = hangout['Time (EST)'].split('-');
    start = time[0].trim();
    end = time[1].trim();
    hangout.start = start = new Date([date, start, timezone].join(' '));
    hangout.end = end = new Date([date, end, timezone].join(' '));

    // Add the hangout info back into rows by start time (Allows comparison to
    // the current time)
    officeHours.rows[hangout.start.getTime()] = hangout;
  });

  document.dispatchEvent(new Event('tf-hangoutsready'));

  function nextOfWeekday(wkdayName) {
    var date = new Date(), targetDay = {
      'Sunday':    0,
      'Monday':    1,
      'Tuesday':   2,
      'Wednesday': 3,
      'Thursday':  4,
      'Friday':    5,
      'Saturday':  6
    }[wkdayName];
    if (isNaN(+targetDay)) { throw new Error('Bad weekday name'); }
    while (date.getDay() !== targetDay) {
      date.setDate(date.getDate() + 1);
    }
    return date;
  }

  function jan1() {
    var d = new Date();
    d.setMonth(0);
    d.setDate(1);
    return d;
  }
}

function parseSlackChannels() {
  var container = channelsContainer;
  JSON.parse(this.responseText).channels.forEach(function (channel) {
    var elem = document.createElement('div'),
      cbox = document.createElement('input'),
      label = document.createElement('label');
    elem.className = 'channel';
    cbox.type = 'checkbox';
    cbox.checked = true;
    cbox.id = channel.id;
    label.htmlFor = channel.id;
    label.innerHTML = channel.name;
    elem.appendChild(cbox);
    elem.appendChild(label);
    container.appendChild(elem);
  });
  document.dispatchEvent(new Event('tf-chanlistready'));
}

var nextAnnounce, nextAnnouncePaused;

function announce() {
  var hangout = nextByTime(officeHours.rows);
  var timeLeft = Math.floor((hangout.start - new Date()) / (1000 * 60))
  var message = '';
  var participants;

  if (timeLeft < 0) {
    message += 'Office hours on now with ';
    message += hangout['Host'];
    message += '\nTime slot: ' + hangout['Time (EST)'];
    participants = getParticipants();
    if (participants.length) {
      message += '\nCurrent hangout participants:';
      getParticipants().forEach(function (participant) {
        message += '\n'
        if (!participant.person) {
          message += 'Unknown';
        } else {
          message += participant.person.displayName;
        }
      });
    }
  } else {
    message += 'The next office hours session will be in ';
    message += timeLeft + ' minutes ';
    message += 'with ';
    message += hangout['Host'];
    repostControl.checked = false;
  }

  statusContainer.innerHTML = '';

  [].forEach.call(document.querySelectorAll('.channel'), function (elem) {
    var cbox = elem.querySelector('input'),
      label = elem.querySelector('label');
    if (cbox.checked) {
      postSlack(message, cbox.id, label.innerText);
    }
  });

  // if (!repostControl.checked) { return; }

  nextAnnounce = Math.min(
    Date.now() + (1000 * 60 * autoPostInterval),
    hangout.end.getTime());
  (function timerLoop() {
    var timeLeft = Math.floor((nextAnnounce - Date.now()) / 1000),
      secondsLeft = timeLeft % 60
      minutesLeft = (timeLeft - secondsLeft) / 60;

    if (nextAnnounce == null || timeLeft <= 0) {
      timerDisplay.innerHTML = '';
      timerContainer.style.display = 'none';
      return nextAnnounce ? announce() : void 0;
    }

    if (nextAnnouncePaused == null) {
      timerDisplay.innerHTML = minutesLeft + ':' + secondsLeft;
    }
    timerContainer.style.display = 'inline';
    setTimeout(timerLoop, 500);
  }());
}

function toggleNextAnnouncePaused() {
  if (nextAnnouncePaused == null) {
    nextAnnouncePaused = nextAnnounce - Date.now();
    pauseControl.value = 'Resume';
  } else {
    nextAnnounce = Date.now() + nextAnnouncePaused;
    nextAnnouncePaused = null;
    pauseControl.value = 'Pause';
  }
}

function cancelNextAnnounce() {
  nextAnnounce = null;
}

function nextByTime(map) {
  var times = Object.keys(map), now = Date.now(),
    lastStart, nextStart, hangout;
  times.push(now);
  times = times.sort();
  lastStart = times[times.indexOf(now) - 1];
  nextStart = times[times.indexOf(now) + 1];

  hangout = map[lastStart];
  if (hangout.end.getTime() < now) { hangout = map[nextStart]; }

  return hangout;
}

function postSlack(message, channel, channelName) {
  message = JSON.stringify([{
    fallback: message,
    pretext: 'http://office-hours.thinkful.com/',
    text: message.replace('\n', '\\n')
  }]);

  var status = document.createElement('p');
  status.innerHTML = 'Posting to ' + channelName + ':';
  statusContainer.appendChild(status);
  var callback = function (response) {
    var result = document.createElement('span');
    if (!response.ok || response.error != null) {
      result.className = 'result failure';
      result.innerHTML = response.error;
    } else {
      result.className = 'result sucess';
      result.innerHTML = 'OK';
    }
    status.appendChild(result);
  };

  var url = 'https://slack.com/api/chat.postMessage'
    + '?token=' + slackToken
    + '&channel=' + channel
    + '&attachments=' + message;
  var xhr = new XMLHttpRequest();
  xhr.open('GET', url);
  xhr.onload = callback;
  console.log('sending') // xhr.send();
}

function getParticipants() {
  if (gapi.hangout.getHangoutUrl() !== officeHoursHangout) {
    console.error("Url doesn't match the expected office hours location");
    console.error(gapi.hangout.getHangoutUrl());
    return [];
  }
  return gapi.hangout.getParticipants();
}

function init() {
  var readyEvents = 0;

  statusContainer.innerHTML = 'Loading resources...';

  // This is a JSONP call
  var script = document.createElement('script');
  script.src = '//spreadsheets.google.com/feeds/cells/' + spreadsheetId
    + '/public/basic?alt=json-in-script&callback=parseSpreadsheetCells';
  document.body.appendChild(script);

  // Slack servers allow CORS
  // Couldn't get POST to work for this API, so we'll use GET throughout
  var xhr = new XMLHttpRequest();
  xhr.open('GET', 'https://slack.com/api/channels.list'
    + '?token=' + slackToken
    + '&exclude_archived=1');
  xhr.onload = parseSlackChannels.bind(xhr);
  xhr.send();

  document.addEventListener('tf-hangoutsready', revealUI);
  document.addEventListener('tf-chanlistready', revealUI);

  function revealUI() {
    readyEvents ++;
    if (readyEvents === 2) {
      document.getElementById('controls').style.visibility = 'visible';
      statusContainer.innerHTML = 'Ready';
    }
  };
}

// Object type to hold the spreadsheet data
function Grid() {
  this.cols = {};
  this.rows = {};
  this.add = this._addColumn;
}

Grid.prototype._addColumn = function (address, text) {
  var row = address.row, col = address.col;
  // Use the rows object to keep track of row numbers we've been given.
  this.rows[row] = this.rows[row];

  // Add column names for each header row
  if (Object.keys(this.rows).length <= 1) {
    this.cols[col] = text;
    return this;
  }

  // As soon as past the first row, assume all column headers have been given
  // and switch modes 
  this.add = this._addData;
  this._addColumn = null;
  // Throw away the record of the header row.
  this.rows = {};
  return this.add(address, text);
};

Grid.prototype._addData = function (address, text) {
  var row = address.row, col = address.col, colName, rowData;

  if (this._addColumn !== null) {
    return this._addColumn(address, text);
  } else if (!(col in this.cols)) {
    throw new Error('no header value for this column');
  }

  colName = this.cols[col];
  rowData = this.rows[row] = this.rows[row] || this.mkRow();
  if (rowData[colName] !== void 0) {
    throw new Error('overlapping data');
  }

  rowData[colName] = text;
  return this;
};

Grid.prototype.mkRow = function () {
  var rowData = {}, cols = this.cols;
  Object.keys(cols).forEach(function (key) {
    var colName = cols[key];
    rowData[colName] = void 0;
  });
  return rowData;
};

// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>

